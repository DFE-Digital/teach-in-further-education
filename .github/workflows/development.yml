name: "Development"

on:
  push:
    branches: [ development ]
    paths-ignore:
      - '**/*.md'
  workflow_dispatch:


jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Use ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.3

      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Installing gems
        run: |
          bundle config path vendor/bundle
          bundle install

      - name: Installing npm
        run: npm ci

      - name: Run Javascript build
        run: npm run build

      - name: Get latest content
        run: bundle exec middleman contentful
        env:
          GOOGLE_ANALYTICS_TAG: ${{ secrets.GOOGLE_ANALYTICS_TAG }}
          CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          CONTENTFUL_DELIVERY_TOKEN: ${{ secrets.CONTENTFUL_DELIVERY_TOKEN }}

      - name: Run tests
        run: |
          MM_DATA_DIR=spec/data bundle exec rspec --pattern spec/features/*_spec.rb  --format RSpec::Github::Formatter  --format progress --format documentation --out ${{ github.workspace }}/out/site-features.txt

      - name: Save unit tests results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit_test_results
          path: ${{ github.workspace }}/out/site-*.txt

      - name: Building middleman site
        run: bundle exec middleman build --verbose
        env:
          GOOGLE_ANALYTICS_TAG: ${{ secrets.GOOGLE_ANALYTICS_TAG }}
          CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          CONTENTFUL_DELIVERY_TOKEN: ${{ secrets.CONTENTFUL_DELIVERY_TOKEN }}

      - shell: bash
        run: |
          cp manifest-dev.yml build/manifest.yml
          cp Staticfile.auth build/Staticfile.auth

      - name: Deploy
        uses: ./.github/actions/cloudfoundry
        with:
            cf_api: ${{ secrets.GOVPAAS_API }}
            cf_username: ${{ secrets.GOVPAAS_USER }}
            cf_password: ${{ secrets.GOVPAAS_PASSWORD }}
            cf_org: ${{ secrets.GOVPAAS_ORG }}
            cf_space: ${{ secrets.GOVPAAS_SPACE }}
            working_dir: build
            command: push

  monitor:
    name: Monitor application
    runs-on: ubuntu-latest
    environment: Development
    defaults:
      run:
        working-directory: ./infrastructure/
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="access_key=${{ secrets.MONITORING_AWS_ACCESS_KEY }}" -backend-config="secret_key=${{ secrets.MONITORING_AWS_SECRET }}"

      - name: Terraform Import Influx
        id: import_influx
        run: terraform import -var 'paas_exporter_username=${{ secrets.GOVPAAS_EXPORTER_USERNAME }}' -var 'paas_exporter_password=${{ secrets.GOVPAAS_EXPORTER_PASSWORD }}' -var 'grafana_admin_password=${{ secrets.GRAFANA_ADMIN_PASSWORD }}' -var 'paas_user=${{ secrets.GOVPAAS_DEVELOPER_USERNAME }}' -var 'paas_password=${{ secrets.GOVPAAS_DEVELOPER_PASSWORD }}' module.prometheus_all.module.influxdb[0].cloudfoundry_service_instance.influxdb 08c84d5a-c92c-48c5-8913-780ba1f4889d

      - name: Terraform Import serviceKey
        id: import_service_key 
        run: terraform import -var 'paas_exporter_username=${{ secrets.GOVPAAS_EXPORTER_USERNAME }}' -var 'paas_exporter_password=${{ secrets.GOVPAAS_EXPORTER_PASSWORD }}' -var 'grafana_admin_password=${{ secrets.GRAFANA_ADMIN_PASSWORD }}' -var 'paas_user=${{ secrets.GOVPAAS_DEVELOPER_USERNAME }}' -var 'paas_password=${{ secrets.GOVPAAS_DEVELOPER_PASSWORD }}' module.prometheus_all.module.influxdb[0].cloudfoundry_service_key.influxdb-key 9cc346a6-3b5c-4189-9dfd-3498efa6b5df
        
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var 'paas_exporter_username=${{ secrets.GOVPAAS_EXPORTER_USERNAME }}' -var 'paas_exporter_password=${{ secrets.GOVPAAS_EXPORTER_PASSWORD }}' -var 'grafana_admin_password=${{ secrets.GRAFANA_ADMIN_PASSWORD }}' -var 'paas_user=${{ secrets.GOVPAAS_DEVELOPER_USERNAME }}' -var 'paas_password=${{ secrets.GOVPAAS_DEVELOPER_PASSWORD }}' -out=tfplan

      - name: Terraform Apply
        id: apply
        run: terraform apply tfplan

      # - name: Terraform Destroy on failure plan
      #   # if: ${{ failure() }}
      #   id: destroy_on_failure_plan
      #   run: terraform plan -destroy -no-color -input=false -var 'paas_exporter_username=${{ secrets.GOVPAAS_EXPORTER_USERNAME }}' -var 'paas_exporter_password=${{ secrets.GOVPAAS_EXPORTER_PASSWORD }}' -var 'grafana_admin_password=${{ secrets.GRAFANA_ADMIN_PASSWORD }}' -var 'paas_user=${{ secrets.GOVPAAS_DEVELOPER_USERNAME }}' -var 'paas_password=${{ secrets.GOVPAAS_DEVELOPER_PASSWORD }}' -out=tfdestroy
            
      # - name: Terraform Destroy on failure
      #   # if: ${{ failure() }}
      #   id: destroy_on_failure
      #   run: terraform apply tfdestroy